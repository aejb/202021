{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84652032},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4ec6f0","input":"","pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"1e32a9","input":"climate=np.genfromtxt(r'https://climate.nasa.gov/system/internal_resources/details/original/647_Global_Temperature_Data_File.txt',skip_header=5) # data downloaded from the NASA climate change website.","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"937b18","input":"np.shape(climate) # I want the first two columns in this array ","output":{"0":{"data":{"text/plain":"(140, 3)"},"exec_count":11,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9457f6","input":"year,tempchange=climate.transpose()[0],climate.transpose()[1]\n# by sepearting the variables with a comma we can assign both in a single line","pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"cb2cdb","input":"plt.figure()\nplt.scatter(year,tempchange, label='NASA data')\nplt.title('Nasa Climate Change data since 1880')\nplt.xlabel('Year')\nplt.ylabel('$\\delta T$ from the 1951-1980 mean [C]')\nplt.legend()\nplt.show()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"2674256a40f145519a905559ba7686d9","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":13,"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"125903","input":"plt.figure()\nplt.hist(tempchange)\nplt.show()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7de3ce6864f94199adb52bb5c4992bd1","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":14,"output_type":"execute_result"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"24b8a8","input":"import numpy as np\nimport matplotlib.cm as cm # import the colour map \nimport matplotlib.pyplot as plt\n#Then generate some data to plot\ndelta = 0.025\nx = y = np.arange(-3.0, 3.0, delta)\nX, Y = np.meshgrid(x, y) # mesh grid generates a 2D grid of points that links the x and y data\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\n# Now to make the plot\nfig, ax = plt.subplots() # the , allows these two commands to go on the same line, followed by the imshow() command\nim = ax.imshow(Z, interpolation='bilinear', cmap=cm.cool,\n               origin='lower', extent=[-3, 3, -3, 3],\n               vmax=abs(Z).max(), vmin=-abs(Z).max())\ncbaxes = fig.add_axes([0.1, 0.1, 0.03, 0.8])  # This is the position for the colorbar\ncb = plt.colorbar(im, cax = cbaxes)\n\nplt.show()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"1fb55a85516448628812da60eed341f6","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":15,"output_type":"execute_result"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"bfeab0","input":"import matplotlib as mpl\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['legend.fontsize'] = 10\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\ntheta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\nz = np.linspace(-2, 2, 100)\nr = z**2 + 1\nx = r * np.sin(theta)\ny = r * np.cos(theta)\nax.plot(x, y, z, label='parametric curve')\nax.legend()\n\nplt.show()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"1daaa6b87d684b4fa8d4bfe9e8e35a6a","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":17,"output_type":"execute_result"}},"pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"860d4c","input":"fig=plt.figure()","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9986cbe5cfe341b3a7a9c02ec1fda137","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":18,"output_type":"execute_result"}},"pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"14f880","input":"ax=plt.axes()","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"cd587c","input":"fig2=plt.figure()\nbx=fig2.add_subplot(1,1,1)","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3b5b91f17c840b0ac29700bcca0b515","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":20,"output_type":"execute_result"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"e556e6","input":"plt.plot() # The MATLAB way.","output":{"0":{"data":{"text/plain":"[]"},"exec_count":21,"output_type":"execute_result"}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"69bd69","input":"\"\"\"\n\n@author: Dr. Andrew Casey\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0., 20., 100)\nfig3 = plt.figure(figsize=(6,8)) # create a figure object\nfig4 = plt.figure(figsize=(10,10))\nax1 = fig3.add_subplot(1, 1, 1)  # create an axes object in the fig1\nax2 = fig4.add_subplot(2, 1, 1) # create an axes object in the fig2\nax3 = fig4.add_subplot(2, 1, 2) # create an axes object in the fig2\n\nax1.set_title('The Title for ax1')\nax2.set_title('The Title for ax2')\nax3.set_title('The Title for ax3')\n\nax2.plot(x,x/20., label='plot for ax2')\nax2.legend(loc='lower right')\nax3.plot(x, np.sin(x), 'r', label=r'$sin(x)$')\nax3.legend(loc='lower right')\n\nax1.plot(x,x**2,'g', label='ax1')\nax3.set_xticks([0,np.pi/2,np.pi,2*np.pi, 3*np.pi, 4*np.pi, 5*np.pi, 6*np.pi])\nax3.set_xticklabels(['0',r'$\\pi/2$',r'$\\pi$',r'$2\\pi$',r'$3\\pi$',r'$4\\pi$',r'$5\\pi$',r'$6\\pi$'])\nax3.spines['left'].set_position('zero')\nax3.spines['right'].set_color('none')\nax3.spines['bottom'].set_position('center')\nax3.spines['top'].set_color('none')\nax3.spines['left'].set_smart_bounds(True)\nax3.spines['bottom'].set_smart_bounds(True)\n\nax1.legend(loc='center')\n\nfig5=plt.figure()\ndx4=fig5.add_subplot(2,2,1)\ndx5=fig5.add_subplot(2,2,2)\ndx6=fig5.add_subplot(2,2,3)\ndx7=fig5.add_subplot(2,2,4)\nfor i in [dx4,dx5,dx6,dx7]:\n    i.set_title('Plot title ')\n    i.set_xlabel('xlabel')\n    i.set_ylabel('ylabel')\n#fig5.tight_layout() # sorts out the layout issues   ","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e09005ffa60b49ffb295c1cf620e6e80","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"64cf85b5c23c45dbb18c8f4823fe86c7","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":22,"output_type":"execute_result"},"2":{"name":"stderr","output_type":"stream","text":"<ipython-input-22-b35e7e4ae228>:31: MatplotlibDeprecationWarning: \nThe set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n  ax3.spines['left'].set_smart_bounds(True)\n<ipython-input-22-b35e7e4ae228>:32: MatplotlibDeprecationWarning: \nThe set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n  ax3.spines['bottom'].set_smart_bounds(True)\n"},"3":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"cd5b11d3bae74b33913fb89d2d258c63","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":22,"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"702a6b","input":"import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0., 20., 100)\nfig3 = plt.figure(figsize=(6,8)) # create a figure object\nfig4 = plt.figure(figsize=(10,10))\nax1 = fig3.add_subplot(1, 1, 1)  # create an axes object in the fig1\nax2 = fig4.add_subplot(2, 1, 1) # create an axes object in the fig2\nax3 = fig4.add_subplot(2, 1, 2) # create an axes object in the fig2\n\nax1.set_title('The Title for ax1')\nax2.set_title('The Title for ax2')\nax3.set_title('The Title for ax3')\n\nax2.plot(x,x/20., label='plot for ax2')\nax2.legend(loc='lower right')\nax3.plot(x, np.sin(x), 'r', label=r'$sin(x)$')\nax3.legend(loc='lower right')\n\nax1.plot(x,x**2,'g', label='ax1')\nax3.set_xticks([0,np.pi/2,np.pi,2*np.pi, 3*np.pi, 4*np.pi, 5*np.pi, 6*np.pi])\nax3.set_xticklabels(['0',r'$\\pi/2$',r'$\\pi$',r'$2\\pi$',r'$3\\pi$',r'$4\\pi$',r'$5\\pi$',r'$6\\pi$'])\nax3.spines['left'].set_position('zero')\nax3.spines['right'].set_color('none')\nax3.spines['bottom'].set_position('center')\nax3.spines['top'].set_color('none')\nax3.spines['left'].set_smart_bounds(True)\nax3.spines['bottom'].set_smart_bounds(True)\n\nax1.legend(loc='center')\n\nfig5=plt.figure()\ndx4=fig5.add_subplot(2,2,1)\ndx5=fig5.add_subplot(2,2,2)\ndx6=fig5.add_subplot(2,2,3)\ndx7=fig5.add_subplot(2,2,4)\nfor i in [dx4,dx5,dx6,dx7]:\n    i.set_title('Plot title ')\n    i.set_xlabel('xlabel')\n    i.set_ylabel('ylabel')\nfig5.tight_layout() # sorts out the layout issues   ","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"398fa2586614427f8e18e79e1fbba354","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":23,"output_type":"execute_result"},"1":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3a422c6cfe07424eb9e7eac570593fdf","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":23,"output_type":"execute_result"},"2":{"name":"stderr","output_type":"stream","text":"<ipython-input-23-45381b8e0f1d>:26: MatplotlibDeprecationWarning: \nThe set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n  ax3.spines['left'].set_smart_bounds(True)\n<ipython-input-23-45381b8e0f1d>:27: MatplotlibDeprecationWarning: \nThe set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n  ax3.spines['bottom'].set_smart_bounds(True)\n"},"3":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"0ebe22df1a51426a8f8fbcd055d326f7","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":23,"output_type":"execute_result"}},"pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"fd4539","input":"ax3.set_title('The Title for ax3_new') # This updates the title on the plot ","output":{"0":{"data":{"text/plain":"Text(0.5, 1.0, 'The Title for ax3_new')"},"exec_count":24,"output_type":"execute_result"}},"pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"960236","input":"#%matplotlib inline # this line is required for the plots to appear in the Jupyter cells, rather than launching the matplotlib GUI\n%matplotlib widget \n#this allows interactive view but you need to be in classic rather than CoCalc Jupyter notebook for this to work\n\nimport matplotlib\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Let printing work the same in Python 2 and 3\nfrom __future__ import print_function\n\n# notice two underscores _ either side of future\n\n","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"3faf8e","input":"x=np.linspace(0,2*np.pi, 100)\ny=np.cos(x)","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"ef27cf","input":"plt.figure()\nplt.plot(x,y)","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e6a1af3c821246d989850b51f3a30717","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"output_type":"display_data"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fc588a84910>]"},"exec_count":31,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"326010","input":"plt.figure()\nplt.plot(x,y,'r+') # change the line style to red plusses highlights that we are dealing with a discrete set of points","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b8336f5d9978454aaf8a217becb52ea9","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"output_type":"display_data"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fc588a7d220>]"},"exec_count":32,"output_type":"execute_result"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"89c106","input":"print(dir(plt)) # matplotlib.pyplot is an extensive package","output":{"0":{"name":"stdout","output_type":"stream","text":"['Annotation', 'Arrow', 'Artist', 'AutoLocator', 'Axes', 'Button', 'Circle', 'Figure', 'FigureCanvasBase', 'FixedFormatter', 'FixedLocator', 'FormatStrFormatter', 'Formatter', 'FuncFormatter', 'GridSpec', 'IndexLocator', 'Line2D', 'LinearLocator', 'Locator', 'LogFormatter', 'LogFormatterExponent', 'LogFormatterMathtext', 'LogLocator', 'MaxNLocator', 'MouseButton', 'MultipleLocator', 'Normalize', 'NullFormatter', 'NullLocator', 'Number', 'PolarAxes', 'Polygon', 'Rectangle', 'ScalarFormatter', 'Slider', 'Subplot', 'SubplotTool', 'Text', 'TickHelper', 'Widget', '_INSTALL_FIG_OBSERVER', '_IP_REGISTERED', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_auto_draw_if_interactive', '_backend_mod', '_code_objs', '_copy_docstring_and_deprecators', '_get_required_interactive_framework', '_interactive_bk', '_log', '_pylab_helpers', '_setup_pyplot_info_docstrings', '_warn_if_gui_out_of_main_thread', '_xkcd', 'acorr', 'angle_spectrum', 'annotate', 'arrow', 'autoscale', 'autumn', 'axes', 'axhline', 'axhspan', 'axis', 'axline', 'axvline', 'axvspan', 'bar', 'barbs', 'barh', 'bone', 'box', 'boxplot', 'broken_barh', 'cbook', 'cla', 'clabel', 'clf', 'clim', 'close', 'cm', 'cohere', 'colorbar', 'colormaps', 'connect', 'contour', 'contourf', 'cool', 'copper', 'csd', 'cycler', 'delaxes', 'disconnect', 'docstring', 'draw', 'draw_all', 'draw_if_interactive', 'errorbar', 'eventplot', 'figaspect', 'figimage', 'figlegend', 'fignum_exists', 'figtext', 'figure', 'fill', 'fill_between', 'fill_betweenx', 'findobj', 'flag', 'functools', 'gca', 'gcf', 'gci', 'get', 'get_backend', 'get_cmap', 'get_current_fig_manager', 'get_figlabels', 'get_fignums', 'get_plot_commands', 'get_scale_names', 'getp', 'ginput', 'gray', 'grid', 'hexbin', 'hist', 'hist2d', 'hlines', 'hot', 'hsv', 'importlib', 'imread', 'imsave', 'imshow', 'inferno', 'inspect', 'install_repl_displayhook', 'interactive', 'ioff', 'ion', 'isinteractive', 'jet', 'legend', 'locator_params', 'logging', 'loglog', 'magma', 'magnitude_spectrum', 'margins', 'matplotlib', 'matshow', 'minorticks_off', 'minorticks_on', 'mlab', 'new_figure_manager', 'nipy_spectral', 'np', 'pause', 'pcolor', 'pcolormesh', 'phase_spectrum', 'pie', 'pink', 'plasma', 'plot', 'plot_date', 'plotting', 'polar', 'prism', 'psd', 'quiver', 'quiverkey', 'rc', 'rcParams', 'rcParamsDefault', 'rcParamsOrig', 'rc_context', 'rcdefaults', 'rcsetup', 're', 'register_cmap', 'rgrids', 'savefig', 'sca', 'scatter', 'sci', 'semilogx', 'semilogy', 'set_cmap', 'set_loglevel', 'setp', 'show', 'specgram', 'spring', 'spy', 'stackplot', 'stem', 'step', 'streamplot', 'style', 'subplot', 'subplot2grid', 'subplot_mosaic', 'subplot_tool', 'subplots', 'subplots_adjust', 'summer', 'suptitle', 'switch_backend', 'sys', 'table', 'text', 'thetagrids', 'threading', 'tick_params', 'ticklabel_format', 'tight_layout', 'time', 'title', 'tricontour', 'tricontourf', 'tripcolor', 'triplot', 'twinx', 'twiny', 'uninstall_repl_displayhook', 'violinplot', 'viridis', 'vlines', 'waitforbuttonpress', 'winter', 'xcorr', 'xkcd', 'xlabel', 'xlim', 'xscale', 'xticks', 'ylabel', 'ylim', 'yscale', 'yticks']\n"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"5f9ff4","input":"help(plt.plot) # the plot docstring gives a detailed set of instructions on the usasge","output":{"0":{"name":"stdout","output_type":"stream","text":"Help on function plot in module matplotlib.pyplot:\n\nplot(*args, scalex=True, scaley=True, data=None, **kwargs)\n    Plot y versus x as lines and/or markers.\n    \n    Call signatures::\n    \n        plot([x], y, [fmt], *, data=None, **kwargs)\n        plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n    \n    The coordinates of the points or line nodes are given by *x*, *y*.\n    \n    The optional parameter *fmt* is a convenient way for defining basic\n    formatting like color, marker and linestyle. It's a shortcut string\n    notation described in the *Notes* section below.\n    \n    >>> plot(x, y)        # plot x and y using default line style and color\n    >>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n    >>> plot(y)           # plot y using x as index array 0..N-1\n    >>> plot(y, 'r+')     # ditto, but with red plusses\n    \n    You can use `.Line2D` properties as keyword arguments for more\n    control on the appearance. Line properties and *fmt* can be mixed.\n    The following two calls yield identical results:\n    \n    >>> plot(x, y, 'go--', linewidth=2, markersize=12)\n    >>> plot(x, y, color='green', marker='o', linestyle='dashed',\n    ...      linewidth=2, markersize=12)\n    \n    When conflicting with *fmt*, keyword arguments take precedence.\n    \n    \n    **Plotting labelled data**\n    \n    There's a convenient way for plotting objects with labelled data (i.e.\n    data that can be accessed by index ``obj['y']``). Instead of giving\n    the data in *x* and *y*, you can provide the object in the *data*\n    parameter and just give the labels for *x* and *y*::\n    \n    >>> plot('xlabel', 'ylabel', data=obj)\n    \n    All indexable objects are supported. This could e.g. be a `dict`, a\n    `pandas.DataFrame` or a structured numpy array.\n    \n    \n    **Plotting multiple sets of data**\n    \n    There are various ways to plot multiple sets of data.\n    \n    - The most straight forward way is just to call `plot` multiple times.\n      Example:\n    \n      >>> plot(x1, y1, 'bo')\n      >>> plot(x2, y2, 'go')\n    \n    - Alternatively, if your data is already a 2d array, you can pass it\n      directly to *x*, *y*. A separate data set will be drawn for every\n      column.\n    \n      Example: an array ``a`` where the first column represents the *x*\n      values and the other columns are the *y* columns::\n    \n      >>> plot(a[0], a[1:])\n    \n    - The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n      groups::\n    \n      >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n    \n      In this case, any additional keyword argument applies to all\n      datasets. Also this syntax cannot be combined with the *data*\n      parameter.\n    \n    By default, each line is assigned a different style specified by a\n    'style cycle'. The *fmt* and line property parameters are only\n    necessary if you want explicit deviations from these defaults.\n    Alternatively, you can also change the style cycle using\n    :rc:`axes.prop_cycle`.\n    \n    \n    Parameters\n    ----------\n    x, y : array-like or scalar\n        The horizontal / vertical coordinates of the data points.\n        *x* values are optional and default to ``range(len(y))``.\n    \n        Commonly, these parameters are 1D arrays.\n    \n        They can also be scalars, or two-dimensional (in that case, the\n        columns represent separate data sets).\n    \n        These arguments cannot be passed as keywords.\n    \n    fmt : str, optional\n        A format string, e.g. 'ro' for red circles. See the *Notes*\n        section for a full description of the format strings.\n    \n        Format strings are just an abbreviation for quickly setting\n        basic line properties. All of these and more can also be\n        controlled by keyword arguments.\n    \n        This argument cannot be passed as keyword.\n    \n    data : indexable object, optional\n        An object with labelled data. If given, provide the label names to\n        plot in *x* and *y*.\n    \n        .. note::\n            Technically there's a slight ambiguity in calls where the\n            second label is a valid *fmt*. ``plot('n', 'o', data=obj)``\n            could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,\n            the former interpretation is chosen, but a warning is issued.\n            You may suppress the warning by adding an empty format string\n            ``plot('n', 'o', '', data=obj)``.\n    \n    Returns\n    -------\n    list of `.Line2D`\n        A list of lines representing the plotted data.\n    \n    Other Parameters\n    ----------------\n    scalex, scaley : bool, default: True\n        These parameters determine if the view limits are adapted to the\n        data limits. The values are passed on to `autoscale_view`.\n    \n    **kwargs : `.Line2D` properties, optional\n        *kwargs* are used to specify properties like a line label (for\n        auto legends), linewidth, antialiasing, marker face color.\n        Example::\n    \n        >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n        >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n    \n        If you make multiple lines with one plot call, the kwargs\n        apply to all those lines.\n    \n        Here is a list of available `.Line2D` properties:\n    \n        Properties:\n        agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array\n        alpha: float or None\n        animated: bool\n        antialiased or aa: bool\n        clip_box: `.Bbox`\n        clip_on: bool\n        clip_path: Patch or (Path, Transform) or None\n        color or c: color\n        contains: unknown\n        dash_capstyle: {'butt', 'round', 'projecting'}\n        dash_joinstyle: {'miter', 'round', 'bevel'}\n        dashes: sequence of floats (on/off ink in points) or (None, None)\n        data: (2, N) array or two 1D arrays\n        drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n        figure: `.Figure`\n        fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n        gid: str\n        in_layout: bool\n        label: object\n        linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n        linewidth or lw: float\n        marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n        markeredgecolor or mec: color\n        markeredgewidth or mew: float\n        markerfacecolor or mfc: color\n        markerfacecoloralt or mfcalt: color\n        markersize or ms: float\n        markevery: None or int or (int, int) or slice or List[int] or float or (float, float) or List[bool]\n        path_effects: `.AbstractPathEffect`\n        picker: unknown\n        pickradius: float\n        rasterized: bool or None\n        sketch_params: (scale: float, length: float, randomness: float)\n        snap: bool or None\n        solid_capstyle: {'butt', 'round', 'projecting'}\n        solid_joinstyle: {'miter', 'round', 'bevel'}\n        transform: `matplotlib.transforms.Transform`\n        url: str\n        visible: bool\n        xdata: 1D array\n        ydata: 1D array\n        zorder: float\n    \n    See Also\n    --------\n    scatter : XY scatter plot with markers of varying size and/or color (\n        sometimes also called bubble chart).\n    \n    Notes\n    -----\n    **Format Strings**\n    \n    A format string consists of a part for color, marker and line::\n    \n        fmt = '[marker][line][color]'\n    \n    Each of them is optional. If not provided, the value from the style\n    cycle is used. Exception: If ``line`` is given, but no ``marker``,\n    the data will be a line without markers.\n    \n    Other combinations such as ``[color][marker][line]`` are also\n    supported, but note that their parsing may be ambiguous.\n    \n    **Markers**\n    \n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'.'``          point marker\n    ``','``          pixel marker\n    ``'o'``          circle marker\n    ``'v'``          triangle_down marker\n    ``'^'``          triangle_up marker\n    ``'<'``          triangle_left marker\n    ``'>'``          triangle_right marker\n    ``'1'``          tri_down marker\n    ``'2'``          tri_up marker\n    ``'3'``          tri_left marker\n    ``'4'``          tri_right marker\n    ``'s'``          square marker\n    ``'p'``          pentagon marker\n    ``'*'``          star marker\n    ``'h'``          hexagon1 marker\n    ``'H'``          hexagon2 marker\n    ``'+'``          plus marker\n    ``'x'``          x marker\n    ``'D'``          diamond marker\n    ``'d'``          thin_diamond marker\n    ``'|'``          vline marker\n    ``'_'``          hline marker\n    =============    ===============================\n    \n    **Line Styles**\n    \n    =============    ===============================\n    character        description\n    =============    ===============================\n    ``'-'``          solid line style\n    ``'--'``         dashed line style\n    ``'-.'``         dash-dot line style\n    ``':'``          dotted line style\n    =============    ===============================\n    \n    Example format strings::\n    \n        'b'    # blue markers with default shape\n        'or'   # red circles\n        '-g'   # green solid line\n        '--'   # dashed line with default color\n        '^k:'  # black triangle_up markers connected by a dotted line\n    \n    **Colors**\n    \n    The supported color abbreviations are the single letter codes\n    \n    =============    ===============================\n    character        color\n    =============    ===============================\n    ``'b'``          blue\n    ``'g'``          green\n    ``'r'``          red\n    ``'c'``          cyan\n    ``'m'``          magenta\n    ``'y'``          yellow\n    ``'k'``          black\n    ``'w'``          white\n    =============    ===============================\n    \n    and the ``'CN'`` colors that index into the default property cycle.\n    \n    If the color is the only part of the format string, you can\n    additionally use any  `matplotlib.colors` spec, e.g. full names\n    (``'green'``) or hex strings (``'#008000'``).\n\n"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"2f7fac","input":"z=np.sin(x)\nplt.figure()\nplt.plot(x,y, label=r'$cos(x)$')\nplt.plot(x,z, label=r'$sin(x)$')# I have not specified the colour, but matplotlib will increment \n#through a range as new plots are addded.\nplt.legend(loc=1) # places the legend (created from the plot labels) in the upper-right\nplt.title('My First Plot')\nplt.xlabel(r'$\\theta$') # the r tells python to read all characters, otherwise it would not read the \\ \nplt.ylabel('y')\nxmin,xmax=plt.xlim() # returns the current limits\nplt.xlim(0,xmax*1.3) # sets new limits, makes some space on the right for the legend\nplt.xticks((0,np.pi/2,np.pi,3*np.pi/2,2*np.pi),('0','$\\pi/2$','$\\pi$','$3\\pi/2$','$2\\pi$')) # Move the tick labels and use \n#Latex commands for the labels\nplt.tight_layout() #Ensures nothing overlaps\nplt.show() # this is not needed in the notebook but is required from your code.\n","output":{"0":{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a0f97abfafa544b18f437ff8b80c3e97","version_major":2,"version_minor":0},"text/plain":"Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"},"exec_count":9,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"6c9f85","input":"## Loading data from a file to an array, np.genfromtxt('fname',...)\nData downloaded from https://climate.nasa.gov/system/internal_resources/details/original/647_Global_Temperature_Data_File.txt","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1556f4","input":"## This notebook forms the basic introduction to plotting in python with matplotlib, next term we will expand on this with further topics:\n\n* Adding multiple plots to a figure (subplots)\n* Exploring different types of graph\n    * Imshow, Axes3D, plotting histograms\n* Animate plots","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1dfc5a","input":"## Some more plot type examples","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"331654","input":"## Multiple Figures and Subplots\nSo far we have been using a style of generating plots in *matplotlib* that is similar to the workflow in __MATLAB__, this is excellent for creating single plots quickly but can get confusing when you have multiple plots a figures produced by the same code.\n\n### The *object orientated approach* to plots in *matplotlib*\n* For all matplotlib plots we start by creating a __figure__, the *figure* is a container that contains all the objects representing axes, graphics, text, and labels. The figure is also an *object*.","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"49d9e2","input":"Compare with the *MATLAB* approach, a `plt.plot()` command results in a *figure* and *axes* that are created for you in the background, this is fine if you are just using one figure, but if you have more complicated output it is better to be able to explicitly reference each object.","pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4f8368","input":"Preparing the notebook for using matplotlib and numpy.","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5585e9","input":"### `imshow()`","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"63813c","input":"Then we add the *axes*,  a bounding box with ticks and labels, which will eventually contain the plot elements that make up our visualization.","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8550a3","input":"## Returning to our plot:\nThe following code begins to show how much control you can have over the appearance of the plot, in particular note that LaTex math symbols have been used to label the xticks, and the ticks have been moved to user defined positions.","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8812ab","input":"matplotlib is an excellent 2D (and 3D) python library that can be used to produce publication quality output from your data. The website https://matplotlib.org/ provides a complete resource for how to use matplotlib for your work. In particular if you click on an example plot in the gallery, https://matplotlib.org/gallery/index.html, the browser will display the code required to produce the plot. It is quite difficult to ask google \"I would like my plot to look like this, and have these features, how do I do it?\", however it is easy to browse through the gallery until you see the feature that you are interested in.\n\nUnlike software like Excel in matplotlib you write code to determine the appearance of all aspects of your graph, you can recycle this code to easily create reproducable, consistent publication quality representations of your scientific data","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8dff48","input":"### Generate the basic matplotlib 2D plot, figure() creates the space into which the plot will be added.","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"924f9a","input":"## Create some data for plotting examples.","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b4f791","input":"plot(\\*args, \\**kwargs) refers to the functions arguments and keyword arguments. The order of the arguments in a python function determines how the argument is passed into the function i.e plot(x,y) will have x as the x-axis, plot(y,x) will have y as the x-axis. The kwargs can come in any order as they are recognised by the keyword i.e. label='my experimental data'.","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b6f0c8","input":"### Within matplotlib.pyplot there are too many functions to describe here:","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c62b8d","input":"As a quick look at how simple it can be to analyse your data with python the following histogram can be generated with a single additional line of code.","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ca2d93","input":"# Python-Matplotlib tutorial","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f1d95e","input":"### `mplot3D` example","pos":26,"state":"done","type":"cell"}
{"id":0,"time":1601541632550,"type":"user"}
{"last_load":1601552658349,"type":"file"}